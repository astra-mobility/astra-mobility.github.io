{"version":3,"file":"static/js/lib-router.60a8322d.js","mappings":"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","sources":["webpack://website/../../node_modules/.pnpm/@remix-run+router@1.6.1/node_modules/@remix-run/router/dist/router.js","webpack://website/../../node_modules/.pnpm/react-router-dom@6.11.1_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/react-router-dom/dist/index.js","webpack://website/../../node_modules/.pnpm/react-router@6.11.1_react@18.2.0/node_modules/react-router/dist/index.js"],"sourcesContent":["import _asyncToGenerator from \"/Users/bytedance/workspace/astra-report-webpage/node_modules/.pnpm/@babel+runtime@7.24.7/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\"; /**\n                                                                                                                                                                                   * @remix-run/router v1.6.1\n                                                                                                                                                                                   *\n                                                                                                                                                                                   * Copyright (c) Remix Software Inc.\n                                                                                                                                                                                   *\n                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                   * LICENSE.md file in the root directory of this source tree.\n                                                                                                                                                                                   *\n                                                                                                                                                                                   * @license MIT\n                                                                                                                                                                                   */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n  * A POP indicates a change to an arbitrary index in the history stack, such\n  * as a back or forward navigation. It does not describe the direction of the\n  * navigation, only that the current index changed.\n  *\n  * Note: This is the default action for newly created history objects.\n  */\n  Action[\"Pop\"] = \"POP\"; /**\n                         * A PUSH indicates a new entry being added to the history stack, such as when\n                         * a link is clicked and a new page loads. When this happens, all subsequent\n                         * entries in the stack are lost.\n                         */\n  Action[\"Push\"] = \"PUSH\"; /**\n                           * A REPLACE indicates the entry at the current index in the history stack\n                           * being replaced by a new one.\n                           */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\"; /**\n                                      * Memory history stores the current location in memory. It is designed for use\n                                      * in stateful non-browser environments like tests and React Native.\n                                      */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n} /**\n  * Browser history stores the location in regular URLs. This is the standard for\n  * most web apps, but it requires some configuration on the server to ensure you\n  * serve the same app at multiple URLs.\n  *\n  * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n  */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n} /**\n  * Hash history stores the location in window.location.hash. This makes it ideal\n  * for situations where you don't want to send the location to the server for\n  * some reason, either because you do cannot configure it or the URL space is\n  * reserved for something else.\n  *\n  * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n  */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n} /**\n  * For browser-based histories, we combine the state and key into an object\n  */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n} /**\n  * Creates a Location object with a unique key from the given Path\n  */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n} /**\n  * Creates a string URL path from the given pathname, search, and hash components.\n  */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n} /**\n  * Parses a string URL path into its separate pathname, search, and hash components.\n  */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n} /**\n  * Matches the given routes to a location and returns the match data.\n  *\n  * @see https://reactrouter.com/utils/match-routes\n  */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n} /**\n  * Computes all combinations of optional path segments for a given path,\n  * excluding combinations that are ambiguous and of lower priority.\n  *\n  * For example, `/one/:two?/three/:four?/:five?` explodes to:\n  * - `/one/three`\n  * - `/one/:two/three`\n  * - `/one/three/:four`\n  * - `/one/three/:five`\n  * - `/one/:two/three/:four`\n  * - `/one/:two/three/:five`\n  * - `/one/three/:four/:five`\n  * - `/one/:two/three/:four/:five`\n  */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n} /**\n  * Returns a path with params interpolated.\n  *\n  * @see https://reactrouter.com/utils/generate-path\n  */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      const starParam = params[star]; // Apply the splat\n      return starParam;\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n      return param;\n    } // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n} /**\n  * Performs pattern matching on a URL pathname and returns information about\n  * the match.\n  *\n  * @see https://reactrouter.com/utils/match-path\n  */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n} /**\n  * @private\n  */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n} /**\n  * Returns a resolved path object relative to the given pathname.\n  *\n  * @see https://reactrouter.com/utils/resolve-path\n  */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n} /**\n  * @private\n  *\n  * When processing relative navigation we want to ignore ancestor routes that\n  * do not contribute to the path, such that index/pathless layout routes don't\n  * interfere.\n  *\n  * For example, when moving a route element into an index route and/or a\n  * pathless layout route, relative link behavior contained within should stay\n  * the same.  Both of the following examples should link back to the root:\n  *\n  *   <Route path=\"/\">\n  *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n  *   </Route>\n  *\n  *   <Route path=\"/\">\n  *     <Route path=\"accounts\">\n  *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n  *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n  *       </Route\n  *     </Route>\n  *   </Route>\n  */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n} /**\n  * @private\n  */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n} /**\n  * @private\n  */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n} /**\n  * @private\n  */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\"); /**\n                                                                   * @private\n                                                                   */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\"); /**\n                                                                                         * @private\n                                                                                         */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search; /**\n                                                                                                                   * @private\n                                                                                                                   */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; /**\n                                                                                                     * This is a shortcut for creating `application/json` responses. Converts `data`\n                                                                                                     * to JSON and sets the `Content-Type` header.\n                                                                                                     */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  resolveData(signal) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let aborted = false;\n      if (!_this.done) {\n        let onAbort = () => _this.cancel();\n        signal.addEventListener(\"abort\", onAbort);\n        aborted = yield new Promise(resolve => {\n          _this.subscribe(aborted => {\n            signal.removeEventListener(\"abort\", onAbort);\n            if (aborted || _this.done) {\n              resolve(aborted);\n            }\n          });\n        });\n      }\n      return aborted;\n    })();\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n}; /**\n   * A redirect response. Sets the status code and the `Location` header.\n   * Defaults to \"302 Found\".\n   */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n}; /**\n   * @private\n   * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n   */\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n} /**\n  * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n  * Response thrown from an action/loader\n  */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n}); //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n  let manifest = {}; // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future); // Cleanup function for history\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x, _x2) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator(function* (to, opts) {\n      if (typeof to === \"number\") {\n        init.history.go(to);\n        return;\n      }\n      let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n      let {\n        path,\n        submission,\n        error\n      } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n      let currentLocation = state.location;\n      let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n      // URL from window.location, so we need to encode it here so the behavior\n      // remains the same as POP and non-data-router usages.  new URL() does all\n      // the same encoding we'd get from a history.pushState/window.location read\n      // without having to touch history\n      nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n      let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n      let historyAction = Action.Push;\n      if (userReplace === true) {\n        historyAction = Action.Replace;\n      } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n        // By default on submissions to the current location we REPLACE so that\n        // users don't have to double-click the back button to get to the prior\n        // location.  If the user redirects to a different location from the\n        // action/loader this will be ignored and the redirect will be a PUSH\n        historyAction = Action.Replace;\n      }\n      let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n      let blockerKey = shouldBlockNavigation({\n        currentLocation,\n        nextLocation,\n        historyAction\n      });\n      if (blockerKey) {\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: nextLocation,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: nextLocation\n            }); // Send the same navigation through\n            navigate(to, opts);\n          },\n          reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return yield startNavigation(historyAction, nextLocation, {\n        submission,\n        // Send through the formData serialization error if we have one so we can\n        // render at the right error boundary after we match routes\n        pendingError: error,\n        preventScrollReset,\n        replace: opts && opts.replace\n      });\n    });\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x3, _x4, _x5) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator(function* (historyAction, location, opts) {\n      // Abort any in-progress navigations and start a new one. Unset any ongoing\n      // uninterrupted revalidations unless told otherwise, since we want this\n      // new navigation to update history normally\n      pendingNavigationController && pendingNavigationController.abort();\n      pendingNavigationController = null;\n      pendingAction = historyAction;\n      isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n      // and track whether we should reset scroll on completion\n      saveScrollPosition(state.location, state.matches);\n      pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let loadingNavigation = opts && opts.overrideNavigation;\n      let matches = matchRoutes(routesToUse, location, basename); // Short circuit with a 404 on the root error boundary if we match nothing\n      if (!matches) {\n        let error = getInternalRouterError(404, {\n          pathname: location.pathname\n        });\n        let {\n          matches: notFoundMatches,\n          route\n        } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n        cancelActiveDeferreds();\n        completeNavigation(location, {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        });\n        return;\n      } // Short circuit if it's only a hash change and not a mutation submission\n      // For example, on /page#hash and submit a <Form method=\"post\"> which will\n      // default to a navigation to /page\n      if (isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n        completeNavigation(location, {\n          matches\n        });\n        return;\n      } // Create a controller/Request for this navigation\n      pendingNavigationController = new AbortController();\n      let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n      let pendingActionData;\n      let pendingError;\n      if (opts && opts.pendingError) {\n        // If we have a pendingError, it means the user attempted a GET submission\n        // with binary FormData so assign here and skip to handleLoaders.  That\n        // way we handle calling loaders above the boundary etc.  It's not really\n        // different from an actionError in that sense.\n        pendingError = {\n          [findNearestBoundary(matches).route.id]: opts.pendingError\n        };\n      } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n        // Call action if we received an action submission\n        let actionOutput = yield handleAction(request, location, opts.submission, matches, {\n          replace: opts.replace\n        });\n        if (actionOutput.shortCircuited) {\n          return;\n        }\n        pendingActionData = actionOutput.pendingActionData;\n        pendingError = actionOutput.pendingActionError;\n        let navigation = _extends({\n          state: \"loading\",\n          location\n        }, opts.submission);\n        loadingNavigation = navigation; // Create a GET request for the loaders\n        request = new Request(request.url, {\n          signal: request.signal\n        });\n      } // Call loaders\n      let {\n        shortCircuited,\n        loaderData,\n        errors\n      } = yield handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n      if (shortCircuited) {\n        return;\n      } // Clean up now that the action/loaders have completed.  Don't clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n      completeNavigation(location, _extends({\n        matches\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, {\n        loaderData,\n        errors\n      }));\n    });\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x6, _x7, _x8, _x9, _x10) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator(function* (request, location, submission, matches, opts) {\n      interruptActiveLoads(); // Put us in a submitting state\n      let navigation = _extends({\n        state: \"submitting\",\n        location\n      }, submission);\n      updateState({\n        navigation\n      }); // Call our action and get the result\n      let result;\n      let actionMatch = getTargetMatch(matches, location);\n      if (!actionMatch.route.action && !actionMatch.route.lazy) {\n        result = {\n          type: ResultType.error,\n          error: getInternalRouterError(405, {\n            method: request.method,\n            pathname: location.pathname,\n            routeId: actionMatch.route.id\n          })\n        };\n      } else {\n        result = yield callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n        if (request.signal.aborted) {\n          return {\n            shortCircuited: true\n          };\n        }\n      }\n      if (isRedirectResult(result)) {\n        let replace;\n        if (opts && opts.replace != null) {\n          replace = opts.replace;\n        } else {\n          // If the user didn't explicity indicate replace behavior, replace if\n          // we redirected to the exact same location we're currently at to avoid\n          // double back-buttons\n          replace = result.location === state.location.pathname + state.location.search;\n        }\n        yield startRedirectNavigation(state, result, {\n          submission,\n          replace\n        });\n        return {\n          shortCircuited: true\n        };\n      }\n      if (isErrorResult(result)) {\n        // Store off the pending error - we use it to determine which loaders\n        // to call and will commit it when we complete the navigation\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n        // action threw an error that'll be rendered in an errorElement, we fall\n        // back to PUSH so that the user can use the back button to get back to\n        // the pre-submission form location to try again\n        if ((opts && opts.replace) !== true) {\n          pendingAction = Action.Push;\n        }\n        return {\n          // Send back an empty object we can use to clear out any prior actionData\n          pendingActionData: {},\n          pendingActionError: {\n            [boundaryMatch.route.id]: result.error\n          }\n        };\n      }\n      if (isDeferredResult(result)) {\n        throw getInternalRouterError(400, {\n          type: \"defer-action\"\n        });\n      }\n      return {\n        pendingActionData: {\n          [actionMatch.route.id]: result.data\n        }\n      };\n    });\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x11, _x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator(function* (request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n      // Figure out the right navigation we want to use for data loading\n      let loadingNavigation = overrideNavigation;\n      if (!loadingNavigation) {\n        let navigation = _extends({\n          state: \"loading\",\n          location,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        }, submission);\n        loadingNavigation = navigation;\n      } // If this was a redirect from an action we don't have a \"submission\" but\n      // we have it on the loading navigation so use that if available\n      let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n        formMethod: loadingNavigation.formMethod,\n        formAction: loadingNavigation.formAction,\n        formData: loadingNavigation.formData,\n        formEncType: loadingNavigation.formEncType\n      } : undefined;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n      // about to reload.  Note that if this is an action reload we would have\n      // already cancelled all pending deferreds so this would be a no-op\n      cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n      if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n        let _updatedFetchers = markFetchRedirectsDone();\n        completeNavigation(location, _extends({\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null\n        }, pendingActionData ? {\n          actionData: pendingActionData\n        } : {}, _updatedFetchers ? {\n          fetchers: new Map(state.fetchers)\n        } : {}));\n        return {\n          shortCircuited: true\n        };\n      } // If this is an uninterrupted revalidation, we remain in our current idle\n      // state.  If not, we need to switch to our loading state and load data,\n      // preserving any new action data or existing action data (in the case of\n      // a revalidation interrupting an actionReload)\n      if (!isUninterruptedRevalidation) {\n        revalidatingFetchers.forEach(rf => {\n          let fetcher = state.fetchers.get(rf.key);\n          let revalidatingFetcher = {\n            state: \"loading\",\n            data: fetcher && fetcher.data,\n            formMethod: undefined,\n            formAction: undefined,\n            formEncType: undefined,\n            formData: undefined,\n            \" _hasFetcherDoneAnything \": true\n          };\n          state.fetchers.set(rf.key, revalidatingFetcher);\n        });\n        let actionData = pendingActionData || state.actionData;\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData ? Object.keys(actionData).length === 0 ? {\n          actionData: null\n        } : {\n          actionData\n        } : {}, revalidatingFetchers.length > 0 ? {\n          fetchers: new Map(state.fetchers)\n        } : {}));\n      }\n      pendingNavigationLoadId = ++incrementingLoadId;\n      revalidatingFetchers.forEach(rf => {\n        if (rf.controller) {\n          // Fetchers use an independent AbortController so that aborting a fetcher\n          // (via deleteFetcher) does not abort the triggering navigation that\n          // triggered the revalidation\n          fetchControllers.set(rf.key, rf.controller);\n        }\n      }); // Proxy navigation abort through to revalidation fetchers\n      let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n      if (pendingNavigationController) {\n        pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n      }\n      let {\n        results,\n        loaderResults,\n        fetcherResults\n      } = yield callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      } // Clean up _after_ loaders have completed.  Don't clean up if we short\n      // circuited because fetchControllers would have been aborted and\n      // reassigned to new controllers for the next navigation\n      if (pendingNavigationController) {\n        pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n      }\n      revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n      let redirect = findRedirect(results);\n      if (redirect) {\n        yield startRedirectNavigation(state, redirect, {\n          replace\n        });\n        return {\n          shortCircuited: true\n        };\n      } // Process and commit output from loaders\n      let {\n        loaderData,\n        errors\n      } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n      activeDeferreds.forEach((deferredData, routeId) => {\n        deferredData.subscribe(aborted => {\n          // Note: No need to updateState here since the TrackedPromise on\n          // loaderData is stable across resolve/reject\n          // Remove this instance if we were aborted or if promises have settled\n          if (aborted || deferredData.done) {\n            activeDeferreds.delete(routeId);\n          }\n        });\n      });\n      let updatedFetchers = markFetchRedirectsDone();\n      let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n      let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n      return _extends({\n        loaderData,\n        errors\n      }, shouldUpdateFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {});\n    });\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator(function* (key, routeId, path, match, requestMatches, submission) {\n      interruptActiveLoads();\n      fetchLoadMatches.delete(key);\n      if (!match.route.action && !match.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error);\n        return;\n      } // Put this fetcher into it's submitting state\n      let existingFetcher = state.fetchers.get(key);\n      let fetcher = _extends({\n        state: \"submitting\"\n      }, submission, {\n        data: existingFetcher && existingFetcher.data,\n        \" _hasFetcherDoneAnything \": true\n      });\n      state.fetchers.set(key, fetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      }); // Call the action for the fetcher\n      let abortController = new AbortController();\n      let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n      fetchControllers.set(key, abortController);\n      let actionResult = yield callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n      if (fetchRequest.signal.aborted) {\n        // We can delete this so long as we weren't aborted by ou our own fetcher\n        // re-submit which would have put _new_ controller is in fetchControllers\n        if (fetchControllers.get(key) === abortController) {\n          fetchControllers.delete(key);\n        }\n        return;\n      }\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        fetchRedirectIds.add(key);\n        let loadingFetcher = _extends({\n          state: \"loading\"\n        }, submission, {\n          data: undefined,\n          \" _hasFetcherDoneAnything \": true\n        });\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          submission,\n          isFetchActionRedirect: true\n        });\n      } // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n      if (isDeferredResult(actionResult)) {\n        throw getInternalRouterError(400, {\n          type: \"defer-action\"\n        });\n      } // Start the data load for current matches, or the next location if we're\n      // in the middle of a navigation\n      let nextLocation = state.navigation.location || state.location;\n      let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n      invariant(matches, \"Didn't find any matches after fetcher action\");\n      let loadId = ++incrementingLoadId;\n      fetchReloadIds.set(key, loadId);\n      let loadFetcher = _extends({\n        state: \"loading\",\n        data: actionResult.data\n      }, submission, {\n        \" _hasFetcherDoneAnything \": true\n      });\n      state.fetchers.set(key, loadFetcher);\n      let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, {\n        [match.route.id]: actionResult.data\n      }, undefined // No need to send through errors since we short circuit above\n      ); // Put all revalidating fetchers into the loading state, except for the\n      // current fetcher which we want to keep in it's current loading state which\n      // contains it's action submission info + action data\n      revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n      abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n      let {\n        results,\n        loaderResults,\n        fetcherResults\n      } = yield callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n      if (abortController.signal.aborted) {\n        return;\n      }\n      abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n      fetchReloadIds.delete(key);\n      fetchControllers.delete(key);\n      revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n      let redirect = findRedirect(results);\n      if (redirect) {\n        return startRedirectNavigation(state, redirect);\n      } // Process and commit output from loaders\n      let {\n        loaderData,\n        errors\n      } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n      let doneFetcher = {\n        state: \"idle\",\n        data: actionResult.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n      let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n      // more recent than the navigation, we want the newer data so abort the\n      // navigation and complete it with the fetcher data\n      if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n        invariant(pendingAction, \"Expected pending action\");\n        pendingNavigationController && pendingNavigationController.abort();\n        completeNavigation(state.navigation.location, {\n          matches,\n          loaderData,\n          errors,\n          fetchers: new Map(state.fetchers)\n        });\n      } else {\n        // otherwise just update with the fetcher data, preserving any existing\n        // loaderData for loaders that did not need to reload.  We have to\n        // manually merge here since we aren't going through completeNavigation\n        updateState(_extends({\n          errors,\n          loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n        }, didAbortFetchLoads ? {\n          fetchers: new Map(state.fetchers)\n        } : {}));\n        isRevalidationRequired = false;\n      }\n    });\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  } /**\n    * Utility function to handle redirects returned from an action or loader.\n    * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n    * example:\n    *\n    *  - user is on /a\n    *  - user clicks a link to /b\n    *  - loader for /b redirects to /c\n    *\n    * In a non-JS app the browser would track the in-flight navigation to /b and\n    * then replace it with /c when it encountered the redirect response.  In\n    * the end it would only ever update the URL bar with /c.\n    *\n    * In client-side routing using pushState/replaceState, we aim to emulate\n    * this behavior and we also do not update history until the end of the\n    * navigation (including processed redirects).  This means that we never\n    * actually touch history until we've processed redirects, so we just use\n    * the history action from the original navigation (PUSH or REPLACE).\n    */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator(function* (key, routeId, path, match, matches, submission) {\n      let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n      let loadingFetcher = _extends({\n        state: \"loading\",\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      }, submission, {\n        data: existingFetcher && existingFetcher.data,\n        \" _hasFetcherDoneAnything \": true\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      }); // Call the loader for this fetcher route match\n      let abortController = new AbortController();\n      let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n      fetchControllers.set(key, abortController);\n      let result = yield callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename); // Deferred isn't supported for fetcher loads, await everything and treat it\n      // as a normal load.  resolveDeferredData will return undefined if this\n      // fetcher gets aborted, so we just leave result untouched and short circuit\n      // below if that happens\n      if (isDeferredResult(result)) {\n        result = (yield resolveDeferredData(result, fetchRequest.signal, true)) || result;\n      } // We can delete this so long as we weren't aborted by our our own fetcher\n      // re-load which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      if (fetchRequest.signal.aborted) {\n        return;\n      } // If the loader threw a redirect Response, start a new REPLACE navigation\n      if (isRedirectResult(result)) {\n        fetchRedirectIds.add(key);\n        yield startRedirectNavigation(state, result);\n        return;\n      } // Process any non-redirect errors thrown\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(state.matches, routeId);\n        state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n        // do we need to behave any differently with our non-redirect errors?\n        // What if it was a non-redirect Response?\n        updateState({\n          fetchers: new Map(state.fetchers),\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          }\n        });\n        return;\n      }\n      invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n    });\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator(function* (state, redirect, _temp) {\n      var _window;\n      let {\n        submission,\n        replace,\n        isFetchActionRedirect\n      } = _temp === void 0 ? {} : _temp;\n      if (redirect.revalidate) {\n        isRevalidationRequired = true;\n      }\n      let redirectLocation = createLocation(state.location, redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      _extends({\n        _isRedirect: true\n      }, isFetchActionRedirect ? {\n        _isFetchActionRedirect: true\n      } : {}));\n      invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n      if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\") {\n        let url = init.history.createURL(redirect.location);\n        let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n        if (window.location.origin !== url.origin || isDifferentBasename) {\n          if (replace) {\n            window.location.replace(redirect.location);\n          } else {\n            window.location.assign(redirect.location);\n          }\n          return;\n        }\n      } // There's no need to abort on redirects, since we don't detect the\n      // redirect until the action/loaders have settled\n      pendingNavigationController = null;\n      let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n      // state.navigation\n      let {\n        formMethod,\n        formAction,\n        formEncType,\n        formData\n      } = state.navigation;\n      if (!submission && formMethod && formAction && formData && formEncType) {\n        submission = {\n          formMethod,\n          formAction,\n          formEncType,\n          formData\n        };\n      } // If this was a 307/308 submission we want to preserve the HTTP method and\n      // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n      // redirected location\n      if (redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod)) {\n        yield startNavigation(redirectHistoryAction, redirectLocation, {\n          submission: _extends({}, submission, {\n            formAction: redirect.location\n          }),\n          // Preserve this flag across redirects\n          preventScrollReset: pendingPreventScrollReset\n        });\n      } else if (isFetchActionRedirect) {\n        // For a fetch action redirect, we kick off a new loading navigation\n        // without the fetcher submission, but we send it along for shouldRevalidate\n        yield startNavigation(redirectHistoryAction, redirectLocation, {\n          overrideNavigation: {\n            state: \"loading\",\n            location: redirectLocation,\n            formMethod: undefined,\n            formAction: undefined,\n            formEncType: undefined,\n            formData: undefined\n          },\n          fetcherSubmission: submission,\n          // Preserve this flag across redirects\n          preventScrollReset: pendingPreventScrollReset\n        });\n      } else {\n        // Otherwise, we kick off a new loading navigation, preserving the\n        // submission info for the duration of this navigation\n        yield startNavigation(redirectHistoryAction, redirectLocation, {\n          overrideNavigation: {\n            state: \"loading\",\n            location: redirectLocation,\n            formMethod: submission ? submission.formMethod : undefined,\n            formAction: submission ? submission.formAction : undefined,\n            formEncType: submission ? submission.formEncType : undefined,\n            formData: submission ? submission.formData : undefined\n          },\n          // Preserve this flag across redirects\n          preventScrollReset: pendingPreventScrollReset\n        });\n      }\n    });\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator(function* (currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      // Call all navigation loaders and revalidating fetcher loaders in parallel,\n      // then slice off the results into separate arrays so we can handle them\n      // accordingly\n      let results = yield Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n        } else {\n          let error = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          };\n          return error;\n        }\n      })]);\n      let loaderResults = results.slice(0, matchesToLoad.length);\n      let fetcherResults = results.slice(matchesToLoad.length);\n      yield Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n      return {\n        results,\n        loaderResults,\n        fetcherResults\n      };\n    });\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest); /**\n                                                                                               * The query() method is intended for document requests, in which we want to\n                                                                                               * call an optional action and potentially multiple loaders for all nested\n                                                                                               * routes.  It returns a StaticHandlerContext object, which is very similar\n                                                                                               * to the router state (location, loaderData, actionData, errors, etc.) and\n                                                                                               * also adds SSR-specific information such as the statusCode and headers\n                                                                                               * from action/loaders Responses.\n                                                                                               *\n                                                                                               * It _should_ never throw and should report all errors through the\n                                                                                               * returned context.errors object, properly associating errors to their error\n                                                                                               * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n                                                                                               * used to emulate React error boundaries during SSr by performing a second\n                                                                                               * pass only down to the boundaryId.\n                                                                                               *\n                                                                                               * The one exception where we do not return a StaticHandlerContext is when a\n                                                                                               * redirect response is returned or thrown from any action/loader.  We\n                                                                                               * propagate that out and return the raw Response so the HTTP server can\n                                                                                               * return it directly.\n                                                                                               */\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  } /**\n    * The queryRoute() method is intended for targeted route requests, either\n    * for fetch ?_data requests or resource route requests.  In this case, we\n    * are only ever calling a single action or loader, and we are returning the\n    * returned value directly.  In most cases, this will be a Response returned\n    * from the action/loader, but it may be a primitive or other value as well -\n    * and in such cases the calling context should handle that accordingly.\n    *\n    * We do respect the throw/return differentiation, so if an action/loader\n    * throws, then this method will throw the value.  This is important so we\n    * can do proper boundary identification in Remix where a thrown Response\n    * must go to the Catch Boundary but a returned Response is happy-path.\n    *\n    * One thing to note is that any Router-initiated Errors that make sense\n    * to associate with a status code will be thrown as an ErrorResponse\n    * instance which include the raw Error, such that the calling context can\n    * serialize the error as they see fit while including the proper response\n    * code.  Examples here are 404 and 405 errors that occur prior to reaching\n    * any user-defined loaders.\n    */\n  function _query() {\n    _query = _asyncToGenerator(function* (request, _temp2) {\n      let {\n        requestContext\n      } = _temp2 === void 0 ? {} : _temp2;\n      let url = new URL(request.url);\n      let method = request.method;\n      let location = createLocation(\"\", createPath(url), null, \"default\");\n      let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n      if (!isValidMethod(method) && method !== \"HEAD\") {\n        let error = getInternalRouterError(405, {\n          method\n        });\n        let {\n          matches: methodNotAllowedMatches,\n          route\n        } = getShortCircuitMatches(dataRoutes);\n        return {\n          basename,\n          location,\n          matches: methodNotAllowedMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: error.status,\n          loaderHeaders: {},\n          actionHeaders: {},\n          activeDeferreds: null\n        };\n      } else if (!matches) {\n        let error = getInternalRouterError(404, {\n          pathname: location.pathname\n        });\n        let {\n          matches: notFoundMatches,\n          route\n        } = getShortCircuitMatches(dataRoutes);\n        return {\n          basename,\n          location,\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: error.status,\n          loaderHeaders: {},\n          actionHeaders: {},\n          activeDeferreds: null\n        };\n      }\n      let result = yield queryImpl(request, location, matches, requestContext);\n      if (isResponse(result)) {\n        return result;\n      } // When returning StaticHandlerContext, we patch back in the location here\n      // since we need it for React Context.  But this helps keep our submit and\n      // loadRouteData operating on a Request instead of a Location\n      return _extends({\n        location,\n        basename\n      }, result);\n    });\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator(function* (request, _temp3) {\n      let {\n        routeId,\n        requestContext\n      } = _temp3 === void 0 ? {} : _temp3;\n      let url = new URL(request.url);\n      let method = request.method;\n      let location = createLocation(\"\", createPath(url), null, \"default\");\n      let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n      if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n        throw getInternalRouterError(405, {\n          method\n        });\n      } else if (!matches) {\n        throw getInternalRouterError(404, {\n          pathname: location.pathname\n        });\n      }\n      let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n      if (routeId && !match) {\n        throw getInternalRouterError(403, {\n          pathname: location.pathname,\n          routeId\n        });\n      } else if (!match) {\n        // This should never hit I don't think?\n        throw getInternalRouterError(404, {\n          pathname: location.pathname\n        });\n      }\n      let result = yield queryImpl(request, location, matches, requestContext, match);\n      if (isResponse(result)) {\n        return result;\n      }\n      let error = result.errors ? Object.values(result.errors)[0] : undefined;\n      if (error !== undefined) {\n        // If we got back result.errors, that means the loader/action threw\n        // _something_ that wasn't a Response, but it's not guaranteed/required\n        // to be an `instanceof Error` either, so we have to use throw here to\n        // preserve the \"error\" state outside of queryImpl.\n        throw error;\n      } // Pick off the right state value to return\n      if (result.actionData) {\n        return Object.values(result.actionData)[0];\n      }\n      if (result.loaderData) {\n        var _result$activeDeferre;\n        let data = Object.values(result.loaderData)[0];\n        if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n          data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n        }\n        return data;\n      }\n      return undefined;\n    });\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator(function* (request, location, matches, requestContext, routeMatch) {\n      invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n      try {\n        if (isMutationMethod(request.method.toLowerCase())) {\n          let _result = yield submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n          return _result;\n        }\n        let result = yield loadRouteData(request, matches, requestContext, routeMatch);\n        return isResponse(result) ? result : _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        });\n      } catch (e) {\n        // If the user threw/returned a Response in callLoaderOrAction, we throw\n        // it to bail out and then return or throw here based on whether the user\n        // returned or threw\n        if (isQueryRouteResponse(e)) {\n          if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n            throw e.response;\n          }\n          return e.response;\n        } // Redirects are always returned since they don't propagate to catch\n        // boundaries\n        if (isRedirectResponse(e)) {\n          return e;\n        }\n        throw e;\n      }\n    });\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator(function* (request, matches, actionMatch, requestContext, isRouteRequest) {\n      let result;\n      if (!actionMatch.route.action && !actionMatch.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: request.method,\n          pathname: new URL(request.url).pathname,\n          routeId: actionMatch.route.id\n        });\n        if (isRouteRequest) {\n          throw error;\n        }\n        result = {\n          type: ResultType.error,\n          error\n        };\n      } else {\n        result = yield callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext);\n        if (request.signal.aborted) {\n          let method = isRouteRequest ? \"queryRoute\" : \"query\";\n          throw new Error(method + \"() call aborted\");\n        }\n      }\n      if (isRedirectResult(result)) {\n        // Uhhhh - this should never happen, we should always throw these from\n        // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n        // can get back on the \"throw all redirect responses\" train here should\n        // this ever happen :/\n        throw new Response(null, {\n          status: result.status,\n          headers: {\n            Location: result.location\n          }\n        });\n      }\n      if (isDeferredResult(result)) {\n        let error = getInternalRouterError(400, {\n          type: \"defer-action\"\n        });\n        if (isRouteRequest) {\n          throw error;\n        }\n        result = {\n          type: ResultType.error,\n          error\n        };\n      }\n      if (isRouteRequest) {\n        // Note: This should only be non-Response values if we get here, since\n        // isRouteRequest should throw any Response received in callLoaderOrAction\n        if (isErrorResult(result)) {\n          throw result.error;\n        }\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: {\n            [actionMatch.route.id]: result.data\n          },\n          errors: null,\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 200,\n          loaderHeaders: {},\n          actionHeaders: {},\n          activeDeferreds: null\n        };\n      }\n      if (isErrorResult(result)) {\n        // Store off the pending error - we use it to determine which loaders\n        // to call and will commit it when we complete the navigation\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        let _context = yield loadRouteData(request, matches, requestContext, undefined, {\n          [boundaryMatch.route.id]: result.error\n        }); // action status codes take precedence over loader status codes\n        return _extends({}, _context, {\n          statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n          actionData: null,\n          actionHeaders: _extends({}, result.headers ? {\n            [actionMatch.route.id]: result.headers\n          } : {})\n        });\n      } // Create a GET request for the loaders\n      let loaderRequest = new Request(request.url, {\n        headers: request.headers,\n        redirect: request.redirect,\n        signal: request.signal\n      });\n      let context = yield loadRouteData(loaderRequest, matches, requestContext);\n      return _extends({}, context, result.statusCode ? {\n        statusCode: result.statusCode\n      } : {}, {\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    });\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator(function* (request, matches, requestContext, routeMatch, pendingActionError) {\n      let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n      if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n        throw getInternalRouterError(400, {\n          method: request.method,\n          pathname: new URL(request.url).pathname,\n          routeId: routeMatch == null ? void 0 : routeMatch.route.id\n        });\n      }\n      let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n      let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n      if (matchesToLoad.length === 0) {\n        return {\n          matches,\n          // Add a null for all matched routes for proper revalidation on the client\n          loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n            [m.route.id]: null\n          }), {}),\n          errors: pendingActionError || null,\n          statusCode: 200,\n          loaderHeaders: {},\n          activeDeferreds: null\n        };\n      }\n      let results = yield Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, true, isRouteRequest, requestContext))]);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      } // Process and commit output from loaders\n      let activeDeferreds = new Map();\n      let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n      let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n      matches.forEach(match => {\n        if (!executedLoaders.has(match.route.id)) {\n          context.loaderData[match.route.id] = null;\n        }\n      });\n      return _extends({}, context, {\n        matches,\n        activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n      });\n    });\n    return _loadRouteData.apply(this, arguments);\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n  let submission;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path,\n        submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired\n    }));\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n} /**\n  * Execute route.lazy() methods to lazily load route modules (loader, action,\n  * shouldRevalidate) and update the routeManifest in place which shares objects\n  * with dataRoutes so those get updated as well.\n  */\nfunction loadLazyRouteModule(_x59, _x60, _x61) {\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator(function* (route, mapRouteProperties, manifest) {\n    if (!route.lazy) {\n      return;\n    }\n    let lazyRoute = yield route.lazy(); // If the lazy route function was executed and removed by another parallel\n    // call then we can return - first lazy() to finish wins because the return\n    // value of lazy is expected to be static\n    if (!route.lazy) {\n      return;\n    }\n    let routeToUpdate = manifest[route.id];\n    invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n    // we could yet be sitting on this route as we can't get there without\n    // resolving lazy() first.\n    //\n    // This is different than the HMR \"update\" use-case where we may actively be\n    // on the route being updated.  The main concern boils down to \"does this\n    // mutation affect any ongoing navigations or any current state.matches\n    // values?\".  If not, it should be safe to update in place.\n    let routeUpdates = {};\n    for (let lazyRouteProperty in lazyRoute) {\n      let staticRouteValue = routeToUpdate[lazyRouteProperty];\n      let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n      warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n      if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n        routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n      }\n    } // Mutate the route with the provided updates.  Do this first so we pass\n    // the updated version to mapRouteProperties\n    Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n    // updates and remove the `lazy` function so we don't resolve the lazy\n    // route again.\n    Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n      lazy: undefined\n    }));\n  });\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction callLoaderOrAction(_x62, _x63, _x64, _x65, _x66, _x67, _x68, _x69, _x70, _x71) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator(function* (type, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {\n    if (isStaticRequest === void 0) {\n      isStaticRequest = false;\n    }\n    if (isRouteRequest === void 0) {\n      isRouteRequest = false;\n    }\n    let resultType;\n    let result;\n    let onReject;\n    let runHandler = handler => {\n      // Setup a promise we can race against so that abort signals short circuit\n      let reject;\n      let abortPromise = new Promise((_, r) => reject = r);\n      onReject = () => reject();\n      request.signal.addEventListener(\"abort\", onReject);\n      return Promise.race([handler({\n        request,\n        params: match.params,\n        context: requestContext\n      }), abortPromise]);\n    };\n    try {\n      let handler = match.route[type];\n      if (match.route.lazy) {\n        if (handler) {\n          // Run statically defined handler in parallel with lazy()\n          let values = yield Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n          result = values[0];\n        } else {\n          // Load lazy route module, then run any returned handler\n          yield loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n          handler = match.route[type];\n          if (handler) {\n            // Handler still run even if we got interrupted to maintain consistency\n            // with un-abortable behavior of handler execution on non-lazy or\n            // previously-lazy-loaded routes\n            result = yield runHandler(handler);\n          } else if (type === \"action\") {\n            let url = new URL(request.url);\n            let pathname = url.pathname + url.search;\n            throw getInternalRouterError(405, {\n              method: request.method,\n              pathname,\n              routeId: match.route.id\n            });\n          } else {\n            // lazy() route has no loader to run.  Short circuit here so we don't\n            // hit the invariant below that errors on returning undefined.\n            return {\n              type: ResultType.data,\n              data: undefined\n            };\n          }\n        }\n      } else if (!handler) {\n        let url = new URL(request.url);\n        let pathname = url.pathname + url.search;\n        throw getInternalRouterError(404, {\n          pathname\n        });\n      } else {\n        result = yield runHandler(handler);\n      }\n      invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n    } catch (e) {\n      resultType = ResultType.error;\n      result = e;\n    } finally {\n      if (onReject) {\n        request.signal.removeEventListener(\"abort\", onReject);\n      }\n    }\n    if (isResponse(result)) {\n      let status = result.status; // Process redirects\n      if (redirectStatusCodes.has(status)) {\n        let location = result.headers.get(\"Location\");\n        invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n        if (!ABSOLUTE_URL_REGEX.test(location)) {\n          location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n        } else if (!isStaticRequest) {\n          // Strip off the protocol+origin for same-origin + same-basename absolute\n          // redirects. If this is a static request, we can let it go back to the\n          // browser as-is\n          let currentUrl = new URL(request.url);\n          let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n          let isSameBasename = stripBasename(url.pathname, basename) != null;\n          if (url.origin === currentUrl.origin && isSameBasename) {\n            location = url.pathname + url.search + url.hash;\n          }\n        } // Don't process redirects in the router during static requests requests.\n        // Instead, throw the Response and let the server handle it with an HTTP\n        // redirect.  We also update the Location header in place in this flow so\n        // basename and relative routing is taken into account\n        if (isStaticRequest) {\n          result.headers.set(\"Location\", location);\n          throw result;\n        }\n        return {\n          type: ResultType.redirect,\n          status,\n          location,\n          revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n        };\n      } // For SSR single-route requests, we want to hand Responses back directly\n      // without unwrapping.  We do this with the QueryRouteResponse wrapper\n      // interface so we can know whether it was returned or thrown\n      if (isRouteRequest) {\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          type: resultType || ResultType.data,\n          response: result\n        };\n      }\n      let data;\n      let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        data = yield result.json();\n      } else {\n        data = yield result.text();\n      }\n      if (resultType === ResultType.error) {\n        return {\n          type: resultType,\n          error: new ErrorResponse(status, result.statusText, data),\n          headers: result.headers\n        };\n      }\n      return {\n        type: ResultType.data,\n        data,\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: result\n      };\n    }\n    if (isDeferredData(result)) {\n      var _result$init, _result$init2;\n      return {\n        type: ResultType.deferred,\n        deferredData: result,\n        statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n        headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n      };\n    }\n    return {\n      type: ResultType.data,\n      data: result\n    };\n  });\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // No hash -> hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // current hash -> same hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // current hash -> new hash\n    return true;\n  }\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nfunction resolveDeferredResults(_x72, _x73, _x74, _x75, _x76, _x77) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator(function* (currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n    for (let index = 0; index < results.length; index++) {\n      let result = results[index];\n      let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n      // anything with.  This is for revalidating fetchers where the route was\n      // removed during HMR\n      if (!match) {\n        continue;\n      }\n      let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n      let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n      if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n        // Note: we do not have to touch activeDeferreds here since we race them\n        // against the signal in resolveDeferredData and they'll get aborted\n        // there if needed\n        let signal = signals[index];\n        invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n        yield resolveDeferredData(result, signal, isFetcher).then(result => {\n          if (result) {\n            results[index] = result || results[index];\n          }\n        });\n      }\n    }\n  });\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x78, _x79, _x80) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator(function* (result, signal, unwrap) {\n    if (unwrap === void 0) {\n      unwrap = false;\n    }\n    let aborted = yield result.deferredData.resolveData(signal);\n    if (aborted) {\n      return;\n    }\n    if (unwrap) {\n      try {\n        return {\n          type: ResultType.data,\n          data: result.deferredData.unwrappedData\n        };\n      } catch (e) {\n        // Handle any TrackedPromise._error values encountered while unwrapping\n        return {\n          type: ResultType.error,\n          error: e\n        };\n      }\n    }\n    return {\n      type: ResultType.data,\n      data: result.deferredData.data\n    };\n  });\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","/**\n * React Router DOM v6.11.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */import * as React from 'react';\nimport { UNSAFE_mapRouteProperties, Router, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, UNSAFE_DataRouterStateContext, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, unstable_useBlocker, UNSAFE_DataRouterContext } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, RouterProvider, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, renderMatches, resolvePath, unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, createRouter, createBrowserHistory, createHashHistory, ErrorResponse, UNSAFE_warning, UNSAFE_invariant, joinPaths } from '@remix-run/router';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n} /**\n  * Creates a URLSearchParams object using the given initializer.\n  *\n  * This is identical to `new URLSearchParams(init)` except it also\n  * supports arrays as values in the object form of the initializer\n  * instead of just strings. This is convenient when you need multiple\n  * values for a given key, but don't want to use an array initializer.\n  *\n  * For example, instead of:\n  *\n  *   let searchParams = new URLSearchParams([\n  *     ['sort', 'name'],\n  *     ['sort', 'price']\n  *   ]);\n  *\n  * you can do:\n  *\n  *   let searchParams = createSearchParams({\n  *     sort: ['name', 'price']\n  *   });\n  */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n  return searchParams;\n}\nfunction getFormSubmissionInfo(target, options, basename) {\n  let method;\n  let action = null;\n  let encType;\n  let formData;\n  if (isFormElement(target)) {\n    let submissionTrigger = options.submissionTrigger;\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr = target.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    encType = options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n    formData = new FormData(target);\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    } // <button>/<input type=\"submit\"> may override attributes of <form>\n    if (options.action) {\n      action = options.action;\n    } else {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n      action = attr ? stripBasename(attr, basename) : null;\n    }\n    method = options.method || target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = options.encType || target.getAttribute(\"formenctype\") || form.getAttribute(\"enctype\") || defaultEncType;\n    formData = new FormData(form); // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || null;\n    encType = options.encType || defaultEncType;\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData\n  };\n}\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"children\"],\n  _excluded3 = [\"reloadDocument\", \"replace\", \"method\", \"action\", \"onSubmit\", \"fetcherKey\", \"routeId\", \"relative\", \"preventScrollReset\"];\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message); // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n} /**\n  * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n  */\nfunction BrowserRouter(_ref) {\n  let {\n    basename,\n    children,\n    window\n  } = _ref;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n} /**\n  * A `<Router>` for use in web browsers. Stores the location in the hash\n  * portion of the URL so it is not sent to the server.\n  */\nfunction HashRouter(_ref2) {\n  let {\n    basename,\n    children,\n    window\n  } = _ref2;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n} /**\n  * A `<Router>` that accepts a pre-instantiated history object. It's important\n  * to note that using your own history object is highly discouraged and may add\n  * two versions of the history library to your bundles unless you use the same\n  * version of the history library that React Router uses internally.\n  */\nfunction HistoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    history\n  } = _ref3;\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i; /**\n                                                            * The public API for rendering a history-aware <a>.\n                                                            */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref4, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset\n    } = _ref4,\n    rest = _objectWithoutPropertiesLoose(_ref4, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext); // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to; // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  } // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return /*#__PURE__*/ (// eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n} /**\n  * A <Link> wrapper that knows if it's \"active\" or not.\n  */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref5, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children\n    } = _ref5,\n    rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator\n  } = React.useContext(UNSAFE_NavigationContext);\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp({\n      isActive,\n      isPending\n    });\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp({\n    isActive,\n    isPending\n  }) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to\n  }), typeof children === \"function\" ? children({\n    isActive,\n    isPending\n  }) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n} /**\n  * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n  * that the interaction with the server is with `fetch` instead of new document\n  * requests, allowing components to add nicer UX to the page as the form is\n  * submitted and returns with data.\n  */\nconst Form = /*#__PURE__*/React.forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n    ref: ref\n  }));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\nconst FormImpl = /*#__PURE__*/React.forwardRef((_ref6, forwardedRef) => {\n  let {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset\n    } = _ref6,\n    props = _objectWithoutPropertiesLoose(_ref6, _excluded3);\n  let submit = useSubmitImpl(fetcherKey, routeId);\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      method: submitMethod,\n      replace,\n      relative,\n      preventScrollReset\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  FormImpl.displayName = \"FormImpl\";\n} /**\n  * This component will emulate the browser's scroll restoration on location\n  * changes.\n  */\nfunction ScrollRestoration(_ref7) {\n  let {\n    getKey,\n    storageKey\n  } = _ref7;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmitImpl\"] = \"useSubmitImpl\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n} /**\n  * Handles the click behavior for router `<Link>` components. This is useful if\n  * you need to create custom `<Link>` components with the same click behavior we\n  * use in our exported `<Link>`.\n  */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault(); // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);\n} /**\n  * A convenient wrapper for reading and writing search parameters via the\n  * URLSearchParams interface.\n  */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n} /**\n  * Returns a function that may be used to programmatically submit a form (or\n  * some arbitrary data) to the server.\n  */\nfunction useSubmit() {\n  return useSubmitImpl();\n}\nfunction useSubmitImpl(fetcherKey, fetcherRouteId) {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (typeof document === \"undefined\") {\n      throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n    }\n    let {\n      action,\n      method,\n      encType,\n      formData\n    } = getFormSubmissionInfo(target, options, basename); // Base options shared between fetch() and navigate()\n    let opts = {\n      preventScrollReset: options.preventScrollReset,\n      formData,\n      formMethod: method,\n      formEncType: encType\n    };\n    if (fetcherKey) {\n      !(fetcherRouteId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for useFetcher()\") : UNSAFE_invariant(false) : void 0;\n      router.fetch(fetcherKey, fetcherRouteId, action, opts);\n    } else {\n      router.navigate(action, _extends({}, opts, {\n        replace: options.replace,\n        fromRouteId: currentRouteId\n      }));\n    }\n  }, [router, basename, fetcherKey, fetcherRouteId, currentRouteId]);\n} // v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1); // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  })); // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash; // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\nfunction createFetcherForm(fetcherKey, routeId) {\n  let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n    return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n      ref: ref,\n      fetcherKey: fetcherKey,\n      routeId: routeId\n    }));\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\nlet fetcherId = 0; /**\n                   * Interacts with route loaders and actions without causing a navigation. Great\n                   * for any interaction that stays on the same page.\n                   */\nfunction useFetcher() {\n  var _route$matches;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let route = React.useContext(UNSAFE_RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.Form()\") : UNSAFE_invariant(false) : void 0;\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => href => {\n    !router ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No router available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n  let fetcher = router.getFetcher(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form,\n    submit,\n    load\n  }, fetcher), [fetcher, Form, submit, load]);\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(\"No router available to clean up from useFetcher()\");\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  return fetcherWithComponents;\n} /**\n  * Provides all fetchers currently on the page. Useful for layouts and parent\n  * routes that need to provide pending/optimistic UI regarding the fetch.\n  */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {}; /**\n                               * When rendered inside a RouterProvider, will restore scroll positions on navigations\n                               */\nfunction useScrollRestoration(_temp3) {\n  let {\n    getKey,\n    storageKey\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation(); // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []); // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches])); // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {// no-op, use default empty object\n      }\n    }, [storageKey]); // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKey);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]); // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      } // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      } // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      } // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      } // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n} /**\n  * Setup a callback to be fired on the window's `beforeunload` event. This is\n  * useful for saving some data to `window.localStorage` just before the page\n  * refreshes.\n  *\n  * Note: The `callback` argument should be a function created with\n  * `React.useCallback()`.\n  */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n} /**\n  * Setup a callback to be fired on the window's `pagehide` event. This is\n  * useful for saving some data to `window.localStorage` just before the page\n  * refreshes.  This event is better supported than beforeunload across browsers.\n  *\n  * Note: The `callback` argument should be a function created with\n  * `React.useCallback()`.\n  */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n} /**\n  * Wrapper around useBlocker to show a window.confirm prompt to users instead\n  * of building a custom UI with useBlocker.\n  *\n  * Warning: This has *a lot of rough edges* and behaves very differently (and\n  * very incorrectly in some cases) across browsers if user click addition\n  * back/forward navigations while the confirm is open.  Use at your own risk.\n  */\nfunction usePrompt(_ref8) {\n  let {\n    when,\n    message\n  } = _ref8;\n  let blocker = unstable_useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n} //#endregion\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, ScrollRestoration, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };","/**\n * React Router v6.11.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */import * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_getPathContributingMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, isRouteErrorResponse, createMemoryHistory, stripBasename, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, resolvePath } from '@remix-run/router';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n} /**\n  * Returns the full href for the given \"to\" value. This is useful for building\n  * custom links that are also accessible and preserve right-click behavior.\n  *\n  * @see https://reactrouter.com/hooks/use-href\n  */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname; // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n} /**\n  * Returns true if this component is a descendant of a <Router>.\n  *\n  * @see https://reactrouter.com/hooks/use-in-router-context\n  */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n} /**\n  * Returns the current location object, which represents the current URL in web\n  * browsers.\n  *\n  * Note: If you're using this it may mean you're doing some of your own\n  * \"routing\" in your app, and we'd like to know what your use case is. We may\n  * be able to provide something higher-level to better suit your needs.\n  *\n  * @see https://reactrouter.com/hooks/use-location\n  */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n} /**\n  * Returns the current navigation action which describes how the router came to\n  * the current location, either by a pop, push, or replace on the history stack.\n  *\n  * @see https://reactrouter.com/hooks/use-navigation-type\n  */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n} /**\n  * Returns a PathMatch object if the given pattern matches the current URL.\n  * This is useful for components that need to know \"active\" state, e.g.\n  * <NavLink>.\n  *\n  * @see https://reactrouter.com/hooks/use-match\n  */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, pathname), [pathname, pattern]);\n} /**\n  * The interface for the navigate() function returned from useNavigate().\n  */\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\"; // Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n} /**\n  * Returns an imperative method for changing the location. Used by <Link>s, but\n  * may also be used by other elements to change the location.\n  *\n  * @see https://reactrouter.com/hooks/use-navigate\n  */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext); // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getPathContributingMatches(matches).map(match => match.pathnameBase));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0; // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\"); // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history.  If this is a root navigation, then we\n    // navigate to the raw basename which allows the basename to have full\n    // control over the presence of a trailing slash on root links\n    if (basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null); /**\n                                                              * Returns the context (if provided) for the child route at this level of the route\n                                                              * hierarchy.\n                                                              * @see https://reactrouter.com/hooks/use-outlet-context\n                                                              */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n} /**\n  * Returns the element for the child route at this level of the route\n  * hierarchy. Used internally by <Outlet> to render child routes.\n  *\n  * @see https://reactrouter.com/hooks/use-outlet\n  */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n} /**\n  * Returns an object of key/value pairs of the dynamic params from the current\n  * URL that were matched by the route path.\n  *\n  * @see https://reactrouter.com/hooks/use-params\n  */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n} /**\n  * Resolves the pathname of the given `to` value against the current location.\n  *\n  * @see https://reactrouter.com/hooks/use-resolved-path\n  */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getPathContributingMatches(matches).map(match => match.pathnameBase));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n} /**\n  * Returns the element of the route that matched the current location, prepared\n  * with the correct context to render the remainder of the route tree. Route\n  * elements in the tree must render an <Outlet> to render their child route's\n  * element.\n  *\n  * @see https://reactrouter.com/hooks/use-routes\n  */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n} // Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState); // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    } // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext); // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState) {\n  var _dataRouterState2;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (matches == null) {\n    var _dataRouterState;\n    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches; // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null; // Only data routers handle errors\n    let errorElement = null;\n    if (dataRouterState) {\n      errorElement = match.route.errorElement || defaultErrorElement;\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    }; // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n} // Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n} /**\n  * Returns the ID for the nearest contextual route\n  */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n} /**\n  * Returns the current navigation, defaulting to an \"idle\" navigation when\n  * no navigation is in progress\n  */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n} /**\n  * Returns a revalidate function for manually triggering revalidation, as well\n  * as the current state of any manual revalidations\n  */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  };\n} /**\n  * Returns the active route matches, useful for accessing loaderData for\n  * parent/child routes or the route \"handle\" property\n  */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(match => {\n    let {\n      pathname,\n      params\n    } = match; // Note: This structure matches that created by createUseMatchesMatch\n    // in the @remix-run/router , so if you change this please also change\n    // that :)  Eventually we'll DRY this up\n    return {\n      id: match.route.id,\n      pathname,\n      params,\n      data: loaderData[match.route.id],\n      handle: match.route.handle\n    };\n  }), [matches, loaderData]);\n} /**\n  * Returns the loader data for the nearest ancestor Route loader\n  */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n} /**\n  * Returns the loaderData for the given routeId\n  */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n} /**\n  * Returns the action data for the nearest ancestor Route action\n  */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useActionData must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  return Object.values((state == null ? void 0 : state.actionData) || {})[0];\n} /**\n  * Returns the nearest ancestor Route error, which could be a loader/action\n  * error or a render error.  This is intended to be called from your\n  * ErrorBoundary/errorElement to display a proper error message.\n  */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError); // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  } // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n} /**\n  * Returns the happy-path data from the nearest ancestor <Await /> value\n  */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n} /**\n  * Returns the error from the nearest ancestor <Await /> value\n  */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0; /**\n                   * Allow the application to block navigations within the SPA and present the\n                   * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n                   * using half-filled form data.  This does not handle hard-reloads or\n                   * cross-origin navigations.\n                   */\nfunction useBlocker(shouldBlock) {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey] = React.useState(() => String(++blockerId));\n  let blockerFunction = React.useCallback(args => {\n    return typeof shouldBlock === \"function\" ? !!shouldBlock(args) : !!shouldBlock;\n  }, [shouldBlock]);\n  let blocker = router.getBlocker(blockerKey, blockerFunction); // Cleanup on unmount\n  React.useEffect(() => () => router.deleteBlocker(blockerKey), [router, blockerKey]); // Prefer the blocker from state since DataRouterContext is memoized so this\n  // ensures we update on blocker state updates\n  return state.blockers.get(blockerKey) || blocker;\n} /**\n  * Stable version of useNavigate that is used when we are in the context of\n  * a RouterProvider.\n  */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0; // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n} /**\n  * Given a Remix Router instance, render the appropriate UI\n  */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router\n  } = _ref; // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  let [state, setState] = React.useState(router.state);\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]); // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: router.basename,\n    location: router.state.location,\n    navigationType: router.state.historyAction,\n    navigator: navigator\n  }, router.state.initialized ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state);\n} /**\n  * A <Router> that stores all entries in memory.\n  *\n  * @see https://reactrouter.com/router-components/memory-router\n  */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n} /**\n  * Changes the current location.\n  *\n  * Note: This API is mostly useful in React.Component subclasses that are not\n  * able to use hooks. In functional components, we recommend you use the\n  * `useNavigate` hook instead.\n  *\n  * @see https://reactrouter.com/components/navigate\n  */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!React.useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate(); // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getPathContributingMatches(matches).map(match => match.pathnameBase), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n} /**\n  * Renders the child route's element, if there is one.\n  *\n  * @see https://reactrouter.com/components/outlet\n  */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n} /**\n  * Declares an element that should be rendered at a certain URL path.\n  *\n  * @see https://reactrouter.com/components/route\n  */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false);\n} /**\n  * Provides location context for the rest of the app.\n  *\n  * Note: You usually won't render a <Router> directly. Instead, you'll render a\n  * router that is more specific to your environment such as a <BrowserRouter>\n  * in web browsers or a <StaticRouter> for server rendering.\n  *\n  * @see https://reactrouter.com/router-components/router\n  */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0; // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n} /**\n  * A container for a nested tree of <Route> elements that renders the branch\n  * that best matches the current location.\n  *\n  * @see https://reactrouter.com/components/routes\n  */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n} /**\n  * Component to use for rendering lazily loaded data from returning defer()\n  * in a loader function\n  */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus;\n(function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n})(AwaitRenderStatus || (AwaitRenderStatus = {}));\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = promise._error !== undefined ? AwaitRenderStatus.error : promise._data !== undefined ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    } // Throw to the suspense boundary\n    throw promise;\n  }\n} /**\n  * @private\n  * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n  */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n} /**\n  * Renders the result of `matchRoutes()` into a React element.\n  */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties\n  }).initialize();\n} ///////////////////////////////////////////////////////////////////////////////\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useBlocker as unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };"],"names":["Action","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","PopStateEventType","createBrowserHistory","options","getUrlBasedHistory","window","globalHistory","pathname","search","hash","location","createLocation","state","usr","to","createPath","createHashHistory","parsePath","substr","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","warning","charAt","JSON","stringify","invariant","value","message","Error","cond","console","warn","e","getHistoryState","index","idx","current","Math","random","toString","_ref","path","parsedPath","searchIndex","getLocation","createHref","validateLocation","defaultView","v5Compat","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","origin","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","push","Push","historyState","pushState","error","replace","Replace","go","n","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","ErrorResponse","constructor","status","statusText","data","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","init","detectErrorBoundary","inFlightDataRoutes","dataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","subscriber","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","deleteBlocker","getSavedScrollPosition","navigate","_x","_x2","_navigate","opts","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","currentLocation","nextLocation","userReplace","blockerKey","shouldBlockNavigation","startNavigation","pendingError","updateBlocker","_x3","_x4","_x5","_startNavigation","abort","startUninterruptedRevalidation","userMatches","createUseMatchesMatch","saveScrollPosition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","AbortController","pendingActionData","request","createClientSideRequest","signal","findNearestBoundary","actionOutput","_x6","_x7","_x8","_x9","_x10","_handleAction","handleAction","shortCircuited","pendingActionError","Request","_x11","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_handleLoaders","handleLoaders","fetcherSubmission","interruptActiveLoads","actionMatch","getTargetMatch","callLoaderOrAction","aborted","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","_updatedFetchers","markFetchRedirectsDone","rf","fetcher","get","revalidatingFetcher","set","controller","abortPendingFetchRevalidations","f","abortFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","delete","redirect","findRedirect","processLoaderData","deferredData","subscribe","done","updatedFetchers","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","_handleFetcherAction","requestMatches","setFetcherError","existingFetcher","abortController","fetchRequest","actionResult","add","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","r","doneFetcher","_handleFetcherLoader","resolveDeferredData","_x32","_x33","_x34","_startRedirectNavigation","_temp","_window","revalidate","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","has","_x35","_x36","_x37","_x38","_x39","_callLoadersAndMaybeResolveData","currentMatches","fetchersToLoad","Promise","all","resolveDeferredResults","deleteFetcher","markFetchersDone","doneKeys","landedId","yeetedKeys","newBlocker","blocker","_ref2","size","entries","Array","blockerFunction","predicate","cancelledRouteIds","dfd","cancel","y","initialize","enableScrollRestoration","positions","getPosition","getKey","fetch","_x20","_x21","_x22","_x23","_x24","_x25","handleFetcherAction","_x26","_x27","_x28","_x29","_x30","_x31","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","Symbol","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","isSubmissionNavigation","isValidMethod","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","values","currentUrl","nextUrl","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","currentPath","loaderMatch","arg","shouldRevalidate","routeChoice","loadLazyRouteModule","_x59","_x60","_x61","_loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","_x62","_x63","_x64","_x65","_x66","_x67","_x68","_x69","_x70","_x71","_callLoaderOrAction","isStaticRequest","isRouteRequest","requestContext","resultType","onReject","runHandler","handler","reject","abortPromise","race","context","isResponse","headers","protocol","isSameBasename","response","contentType","json","text","statusCode","deferred","resolveData","isDeferredData","_result$init","_result$init2","Headers","body","URLSearchParams","File","name","processRouteLoaderData","foundError","loaderHeaders","newLoaderData","mergedLoaderData","reverse","find","_temp4","errorMessage","_x72","_x73","_x74","_x75","_x76","_x77","_resolveDeferredResults","signals","isRevalidatingLoader","then","_x78","_x79","_x80","_resolveDeferredData","unwrap","unwrappedData","getAll","v","handle","pathMatches","createBrowserRouter","parseHydrationData","createHashRouter","__staticRouterHydrationData","deserializeErrors","serialized","val","__type","stack","DataRouterHook","DataRouterStateHook","DataRouterContext","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","useLocation","useIsomorphicLayoutEffect","cb","static","useNavigate","useDataRouterContext","UseNavigateStable","useCurrentRouteId","activeRef","useNavigateStable","navigator","routePathnamesJson","parse","useNavigateUnstable","OutletContext","useRoutesImpl","dataRouterState","parentMatches","routeMatch","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","renderedMatches","_renderMatches","Provider","navigationType","DefaultErrorComponent","_state$errors","useDataRouterState","UseRouteError","useRouteError","lightgrey","preStyles","padding","backgroundColor","style","fontStyle","defaultErrorElement","RenderErrorBoundary","props","super","getDerivedStateFromError","getDerivedStateFromProps","componentDidCatch","errorInfo","render","routeContext","component","RenderedRoute","dataRouterContext","staticContext","errorElement","ErrorBoundary","_deepestRenderedBoundaryId","_dataRouterState2","_dataRouterState","errorIndex","min","reduceRight","getChildren","Component","element","hookName","ctx","useRouteContext","thisRoute","useMatches","UseMatches","RouterProvider","fallbackElement","setState","Router","DataRoutes","Navigate","_ref4","jsonPath","Outlet","useOutlet","Route","_props","_ref5","basenameProp","locationProp","staticProp","navigationContext","locationContext","trailingPathname","AwaitRenderStatus","createRoutesFromChildren","updates"],"sourceRoot":""}